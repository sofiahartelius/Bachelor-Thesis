problem.solver(4,1) #-52
problem.solver(-4,1) #-52
problem.solver(5,1) #-52
problem.solver(-5,1) #-52
problem.solver(6,1) #-52
problem.solver(-6,1) #-52
problem.solver(8,1) #-52
problem.solver(-8,1) #-52
problem.solver(9,1) #-52
problem.solver(-9,1) #-52
problem.solver(12,1) #-52
problem.solver(-12,1) #-52
problem.solver(24,1) #-52
problem.solver(-24,1) #-52
problem.solver(3,2) #-116
problem.solver(-3,2) #-116
problem.solver(1,3) #106.25
problem.solver(-1,3) #106.25
problem.solver(2,3) #106.25
problem.solver(-2,3) #106.25
problem.solver(4,3) #-52
problem.solver(-4,3) #-52
problem.solver(8,3) #-52
problem.solver(-8,3) #-52
problem.solver(1,4) #
problem.solver(-1,4) #106.25
problem.solver(3,4) #
problem.solver(-3,4) # 0
problem.solver(9,4) #
problem.solver(-9,4) #
problem.solver(1,6) #-113.75
problem.solver(-1,6) #106.25
problem.solver(3,6) #106.25
problem.solver(-3,6) #106.25
problem.solver(8,6) #-52
problem.solver(-8,6) #-52
problem.solver(1,8) #106.25
problem.solver(-1,8) #106.25
problem.solver(3,8) #106.25
problem.solver(-3,8) #106.25
problem.solver(9,8) #106.25
problem.solver(-9,8) #106.25
problem.solver(1,16) #106.25
problem.solver(-1,16) #106.25
problem.solver(3,16) #106.25
problem.solver(-3,16) #106.25
problem.solver(9,16) #106.25
problem.solver(-9,16) #106.25
problem.solver(23,1) #-52
problem.solver(-23,1) #-52
problem.solver(23,2) #-52
problem.solver(-23,2) #-52
problem.solver(15,4) #
problem.solver(-15,4) #
prutt
# q=1
problem.solver(1,1) #64
problem.solver(-1,1) #64
problem.solver(2,1) #64
problem.solver(-2,1) #64
problem.solver(3,1) #-52
problem.solver(-3,1) #-52
problem.solver(4,1) #-52
problem.solver(-4,1) #-52
problem.solver(5,1) #-52
problem.solver(-5,1) #-52
problem.solver(6,1) #-52
problem.solver(-6,1) #-52
problem.solver(8,1) #-52
problem.solver(-8,1) #-52
problem.solver(9,1) #-52
problem.solver(-9,1) #-52
problem.solver(12,1) #-52
problem.solver(-12,1) #-52
problem.solver(23,1) #-52
problem.solver(-23,1) #-52
problem.solver(24,1) #-52
problem.solver(-24,1) #-52
# q=2
problem.solver(1,2) #-116
problem.solver(-1,2) #-116
problem.solver(3,2) #-116
problem.solver(-3,2) #-116
problem.solver(4,2) #-116
problem.solver(-4,2) #-116
problem.solver(8,2) #-116
problem.solver(-8,2) #-116
problem.solver(23,2) #-52
problem.solver(-23,2) #-52
# q=3
problem.solver(1,3) #106.25
problem.solver(-1,3) #106.25
problem.solver(2,3) #106.25
problem.solver(-2,3) #106.25
problem.solver(4,3) #-52
problem.solver(-4,3) #-52
problem.solver(8,3) #-52
problem.solver(-8,3) #-52
# q=4
problem.solver(1,4) #
problem.solver(-1,4) #106.25
problem.solver(3,4) #
problem.solver(-3,4) # 0
problem.solver(8,2) #-116
problem.solver(-8,2) #-116
problem.solver(9,4) #
problem.solver(-9,4) #
problem.solver(15,4) #
problem.solver(-15,4) #
# q=6
problem.solver(1,6) #-113.75
problem.solver(-1,6) #106.25
problem.solver(3,6) #106.25
problem.solver(-3,6) #106.25
problem.solver(8,6) #-52
problem.solver(-8,6) #-52
# q=8
problem.solver(1,8) #106.25
problem.solver(-1,8) #106.25
problem.solver(3,8) #106.25
problem.solver(-3,8) #106.25
problem.solver(9,8) #106.25
problem.solver(-9,8) #106.25
# q =16
problem.solver(1,16) #106.25
problem.solver(-1,16) #106.25
problem.solver(3,16) #106.25
problem.solver(-3,16) #106.25
problem.solver(9,16) #106.25
problem.solver(-9,16) #106.25
problem.solver <-function(p,q){
x <- p/q
result <- x^{3}-6*x^{2}+11*x-6
print(result)
}
problem.solver <-function(p,q){
x <- p/q
result <- 3*x^{2}-12*x+11
print(result)
}
problem.solver(1,1) #64
problem.solver(-1,1) #64
problem.solver(11,1) #-52
problem.solver(-11,1) #-52
problem.solver(1,3) #106.25
problem.solver(-1,3) #106.25
problem.solver(11,3) #-52
problem.solver(-11,3) #-52
attach(cars)
install.packages("leaps")
install.packages("leaps")
###################################################
### code chunk number 5: l6-rssfig
###################################################
library("leaps")
frac<-.5 ## creating a training data set of proportion frac - play around with different fractions here
ii<-sample(seq(1,dim(SA)[1]),round(dim(SA)[1]*frac)) ## data points to use for training
yy<-SA[ii,12] ## training data
xx<-as.matrix(SA[ii,-c(12)])
###################################################
### code chunk number 4: ldl1
###################################################
SA<-data.frame(read.table("SA.dat",header=T)) ## read in the data
SA <- read.delim("C:/Users/sofia/Dropbox/My PC (LAPTOP-D8FGCDUC)/Documents/Studier/Dokument & Litteratur/MSG500/Lecture 7/SA.dat")
View(SA)
###################################################
### code chunk number 4: ldl1
###################################################
SA <- read.delim("C:/Users/sofia/Dropbox/My PC (LAPTOP-D8FGCDUC)/Documents/Studier/Dokument & Litteratur/MSG500/Lecture 7/SA.dat")
frac<-.5 ## creating a training data set of proportion frac - play around with different fractions here
ii<-sample(seq(1,dim(SA)[1]),round(dim(SA)[1]*frac)) ## data points to use for training
yy<-SA[ii,12] ## training data
xx<-as.matrix(SA[ii,-c(12)])
yyt<-SA[-ii,12] ## test data
xxt<-as.matrix(SA[-ii,-c(12)])
###
rleaps<-regsubsets(xx,yy,int=T,nbest=1000,nvmax=dim(SA)[2],really.big=T,method=c("ex")) ## all subset models
###
rleaps<-regsubsets(xx,yy,int=T,nbest=1000,nvmax=dim(SA)[2],really.big=T,method=c("ex")) ## all subset models
cleaps<-summary(rleaps,matrix=T) ## True/False matrix. The r-th is a True/False statement about which
cleaps
cleaps(which())
cleaps$which
cleaps$rss
dim(cleaps$which)
###################################################
### code chunk number 7: l6-pmsefig
###################################################
pmses<-rep(0,dim(cleaps$which)[1])
for (ta in (1:dim(cleaps$which)[1])) {
# select covariates in training data for current model
# -1 removes the intercep stored in cleaps
x <- xx[, cleaps$which[ta,-1]] # TRAINING covariates
mmr <- lm(yy ~ x)  # fit training data
# now select same covariates in test data
x <- xxt[, cleaps$which[ta,-1]] # TESTING covariates
# predict the outcome of the new data from testing covariates
yhat <- predict(mmr, as.data.frame(x))
# mmr<-lm(yy ~ xx[,cleaps$which[ta,-1]==T])
PEcp<-sum((yyt-yhat)^2)/length(yyt)
pmses[ta]<-PEcp }
library(readr)
elliptic_txs_classes <- read_csv("Studier/Dataset/EllipticDataSet/elliptic_txs_classes.csv")
View(elliptic_txs_classes)
library(readr)
elliptic_txs_edgelist <- read_csv("Studier/Dataset/EllipticDataSet/elliptic_txs_edgelist.csv")
View(elliptic_txs_edgelist)
library(readr)
elliptic_txs_features <- read_csv("Studier/Dataset/EllipticDataSet/elliptic_txs_features.csv")
View(elliptic_txs_features)
View(elliptic_txs_edgelist)
0.95*nrow(elliptic_txs_edgelist)
unique(elliptic_txs_edgelist[,1])
library(readr)
Result <- read_csv("Studier/Dataset/EllipticDataSet/Result.csv")
View(Result)
View(elliptic_txs_edgelist)
sum(unique(elliptic_txs_edgelist$txtdl1))
sum(unique(elliptic_txs_edgelist$txtd1))
sum(unique(elliptic_txs_edgelist$txld1))
sum(unique(elliptic_txs_edgelist$txId1))
View(Result)
sum(unique(Result$txId)
)
View(Result)
View(elliptic_txs_edgelist)
View(elliptic_txs_classes)
View(Result)
View(elliptic_txs_classes)
View(Result)
0.95*nrow(203769)
0.95*203769
View(Result)
View(elliptic_txs_classes)
View(Result)
elliptic_txs_classes[,1] == Result[,1]
0.995*203769
library(readr)
transactions <- read_csv("GitHub_folder/Kandidat/100vertices-10Kedges/100vertices-10Kedges/transactions.csv")
View(transactions)
library(readr)
alerts <- read_csv("GitHub_folder/Kandidat/100vertices-10Kedges/100vertices-10Kedges/alerts.csv")
View(alerts)
library(readr)
accounts <- read_csv("GitHub_folder/Kandidat/100vertices-10Kedges/100vertices-10Kedges/accounts.csv")
View(accounts)
sum(unique(accounts$ACCOUNT_ID))
unique(accounts$ACCOUNT_ID)
unique(accounts$CUSTOMER_ID)
library(readr)
accounts <- read_csv("GitHub_folder/Kandidat/100vertices-10Kedges/accounts.csv")
View(accounts)
library(readr)
fA <- read_csv("GitHub_folder/Kandidat/fA.csv")
View(fA)
library(readr)
fA <- read_csv("GitHub_folder/Kandidat/fA.csv",
col_names = FALSE)
View(fA)
plot.new()
library('igraph')
nodes2 <- accounts
links2 <- fA
links2 <- as.matrix(links2)
head(nodes2)
head(links2)
net2 <- graph_from_incidence_matrix(links2)
net2 <- graph_from_adjacency_matrix(links2, mode = "undirected", weighted = TRUE)
net2 <- simplify(net2, remove.multiple = F, remove.loops = T)
V(net2)$label <- nodes2$id
deg <- degree(net2, mode="all")
V(net2)$size <- deg*3
#plot(net2)
#plot(net2, edge.label=round(E(net2)$weight, 3))
layout <- layout.reingold.tilford(net2)
#plot.igraph(net2,vertex.size=3,layout=layout.lgl)
plot.igraph(net2,vertex.size=3,vertex.label.cex=.5,layout=layout.fruchterman.reingold(net2, niter=10000))
View(nodes2)
V(net2)$label <- nodes2$ACCOUNT_ID
deg <- degree(net2, mode="all")
V(net2)$size <- deg*3
#plot(net2)
#plot(net2, edge.label=round(E(net2)$weight, 3))
layout <- layout.reingold.tilford(net2)
#plot.igraph(net2,vertex.size=3,layout=layout.lgl)
plot.igraph(net2,vertex.size=3,vertex.label.cex=.5,layout=layout.fruchterman.reingold(net2, niter=10000))
plot(links, layout = layout.bipartite)
links <- fA
plot(links, layout = layout.bipartite)
plot.new()
library('igraph')
links <- fA
plot(links, layout = layout.bipartite)
plot(links, layout = layout.random)
plot.new()
library('igraph')
nodes <- accounts
links <- fA
par(mfrow=c(2,2), mar=c(1,1,1,1))
plot(links, layout = layout.random)
EG_vert <- c(1,2,3,4,5,6)
EG_vert <- range(1,6,1)
EG_vert <- range(1,6,6)
EG_vert <- seq(1,6,1)
EG <- c()
# Only frauds
#### Restore Session & set major parameters ####
this.dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(this.dir)
# Restore Session & set major parameters #
cat("\014")
rm(list=ls())
graphics.off()
# Restore
this.dir <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(this.dir)
print("Session Restored & new parameters set")
#### Packages ####
library(tidyverse)
library(ggplot2)
library(MASS)
library(chron)
library(scatterplot3d)
library(cowplot)
library(GGally)
library(vioplot)
library(leaps)
library(ISLR)
library(igraph)
library(wesanderson)
library(extrafont)
loadfonts()
#### Load data
accounts <- read.csv("./100vertices-10Kedges/accounts.csv",
header = TRUE,
stringsAsFactors = FALSE)
transactions <- read.csv("./100vertices-10Kedges/transactions.csv",
header = TRUE,
stringsAsFactors = FALSE)
alerts <- read.csv("./100vertices-10Kedges/alerts.csv",
header = TRUE,
stringsAsFactors = FALSE)
# Fetch falsely accused nodes
p <- c(1,15,21,22,35,36,37,73,75,80,83,84,85,86,92,96,98)
poor_nodes <- accounts[p,1]
# Remove non-frauds
accounts <- accounts[-which(accounts$IS_FRAUD == "false"),]
accounts$test <- c(1,1,1,0,1,0,1,1,0,0,0,0,1,0,1,0,1,0,1)
print(c(accounts$ACCOUNT_ID))
# Build AMLSim100 full graph
links_0 <- transactions[,- c(1, 4:8)]
G_0 <- graph_from_data_frame(links_0, directed = F)
G_0 <- simplify(G_0, remove.multiple = F)
par(mfrow = c(1,1))
plot(G_0,
layout=layout.circle,
main = "AMLSim100 Graph",
vertex.color = wesanderson::wes_palettes$Royal1[1],
vertex.size=5,
vertex.frame.color= "white", #wesanderson::wes_palettes$BottleRocket2[4],
vertex.label.family = "Bodoni MT",
vertex.label.color="white",
vertex.label.font = 2,
vertex.label.cex=0.8,
edge.curved=0,
edge.color=wesanderson::wes_palettes$BottleRocket2[4],
edge.width = 0.3)
#$IS_FRAUD <- accounts$IS_FRAUD
#G <- graph_from_data_frame(transactions[,- c(1, 4:8)], directed = F)
#V(G)$IS_FRAUD <- accounts$IS_FRAUD
#G <- simplify(G, remove.multiple = F)
#plot(G,layout=layout.fruchterman.reingold, vertex.color=colrs[1+(V(G)$IS_FRAUD == "T"]))
#G <- simplify(G, remove.multiple = T)
#plot(G,layout=layout.fruchterman.reingold, vertex.color=c( "gold", "red")[1+(V(G)$IS_FRAUD=="true")])
sub <- transactions[transactions$SENDER_ACCOUNT_ID == accounts$ACCOUNT_ID[1] |
transactions$SENDER_ACCOUNT_ID == accounts$ACCOUNT_ID[2] |
transactions$SENDER_ACCOUNT_ID == accounts$ACCOUNT_ID[3] |
transactions$SENDER_ACCOUNT_ID == accounts$ACCOUNT_ID[4] |
transactions$SENDER_ACCOUNT_ID == accounts$ACCOUNT_ID[5] |
transactions$SENDER_ACCOUNT_ID == accounts$ACCOUNT_ID[6] |
transactions$SENDER_ACCOUNT_ID == accounts$ACCOUNT_ID[7] |
transactions$SENDER_ACCOUNT_ID == accounts$ACCOUNT_ID[8] |
transactions$SENDER_ACCOUNT_ID == accounts$ACCOUNT_ID[9] |
transactions$SENDER_ACCOUNT_ID == accounts$ACCOUNT_ID[10] |
transactions$SENDER_ACCOUNT_ID == accounts$ACCOUNT_ID[11] |
transactions$SENDER_ACCOUNT_ID == accounts$ACCOUNT_ID[12] |
transactions$SENDER_ACCOUNT_ID == accounts$ACCOUNT_ID[13] |
transactions$SENDER_ACCOUNT_ID == accounts$ACCOUNT_ID[14] |
transactions$SENDER_ACCOUNT_ID == accounts$ACCOUNT_ID[15] |
transactions$SENDER_ACCOUNT_ID == accounts$ACCOUNT_ID[16] |
transactions$SENDER_ACCOUNT_ID == accounts$ACCOUNT_ID[17] |
transactions$SENDER_ACCOUNT_ID == accounts$ACCOUNT_ID[18] |
transactions$SENDER_ACCOUNT_ID == accounts$ACCOUNT_ID[19] ,]
table(sub$SENDER_ACCOUNT_ID)
sub <- sub[sub$RECEIVER_ACCOUNT_ID == accounts$ACCOUNT_ID[1] |
sub$RECEIVER_ACCOUNT_ID == accounts$ACCOUNT_ID[2] |
sub$RECEIVER_ACCOUNT_ID == accounts$ACCOUNT_ID[3] |
sub$RECEIVER_ACCOUNT_ID == accounts$ACCOUNT_ID[4] |
sub$RECEIVER_ACCOUNT_ID == accounts$ACCOUNT_ID[5] |
sub$RECEIVER_ACCOUNT_ID == accounts$ACCOUNT_ID[6] |
sub$RECEIVER_ACCOUNT_ID == accounts$ACCOUNT_ID[7] |
sub$RECEIVER_ACCOUNT_ID == accounts$ACCOUNT_ID[8] |
sub$RECEIVER_ACCOUNT_ID == accounts$ACCOUNT_ID[9] |
sub$RECEIVER_ACCOUNT_ID == accounts$ACCOUNT_ID[10] |
sub$RECEIVER_ACCOUNT_ID == accounts$ACCOUNT_ID[11] |
sub$RECEIVER_ACCOUNT_ID == accounts$ACCOUNT_ID[12] |
sub$RECEIVER_ACCOUNT_ID == accounts$ACCOUNT_ID[13] |
sub$RECEIVER_ACCOUNT_ID == accounts$ACCOUNT_ID[14] |
sub$RECEIVER_ACCOUNT_ID == accounts$ACCOUNT_ID[15] |
sub$RECEIVER_ACCOUNT_ID == accounts$ACCOUNT_ID[16] |
sub$RECEIVER_ACCOUNT_ID == accounts$ACCOUNT_ID[17] |
sub$RECEIVER_ACCOUNT_ID == accounts$ACCOUNT_ID[18] |
sub$RECEIVER_ACCOUNT_ID == accounts$ACCOUNT_ID[19] ,]
sub <- sub[,- c(1, 4:6, 8)]
links_1 <- sub[,-3]
links_2 <- sub[which(sub$IS_FRAUD == "True"),]
links_2 <- links_2[,-3]
G_1 <- graph_from_data_frame(links_1, directed = F)
G_1 <- simplify(G_1, remove.multiple = F)
G_2 <- graph_from_data_frame(links_2, directed = T)
G_2 <- simplify(G_2, remove.multiple = T)
colrs <- c("red", "blue")
V(G_2)$color <- colrs[V(G_2)$test]
par(mfrow = c(1,1))
plot(G_1,
layout=layout.circle,
main = "AMLSim100 Graph",
vertex.color = wesanderson::wes_palettes$Royal1[1],
vertex.size=20,
vertex.frame.color= "white", #wesanderson::wes_palettes$BottleRocket2[4],
vertex.label.family = "Bodoni MT",
vertex.label.color="white",
vertex.label.font = 2,
vertex.label.cex=1.8,
edge.curved=0,
edge.color=wesanderson::wes_palettes$BottleRocket2[4],
edge.width = 3)
par(mar = c(2,3,5,3), cex.main = 1.8 )
set.seed(2020)
plot(G_2,
layout=layout.fruchterman.reingold,
main = "Fraudulent Networks",
main.family = "Comic Sans MS",
vertex.color = wesanderson::wes_palettes$Royal1[1],
vertex.size=20,
vertex.frame.color= "white", #wesanderson::wes_palettes$BottleRocket2[4],
vertex.label.family = "Bodoni MT",
vertex.label.font = 2,
vertex.label.color="white",
vertex.label.cex=1.8,
edge.curved=0,
edge.color=wesanderson::wes_palettes$BottleRocket2[4],
edge.width = 3)
# [1] 55 53 66 67 90 24 9  42 95 17 74 57 81 43 82 39 20 12 47
V(G_2)$test <- c(1,0,1,1,1,1,0,0,0,1,1,1,2,2,1,1,1,2,2)
set.seed(2020)
plot(G_2,
layout=layout.fruchterman.reingold,
main = "GCN Detection Rate",
vertex.color = ifelse(V(G_2)$test == 1,
wesanderson::wes_palettes$Royal1[2],
ifelse(V(G_2)$test == 0,
wesanderson::wes_palettes$Royal1[1],
wesanderson::wes_palettes$Moonrise3[3])),
vertex.size=20,
vertex.frame.color= "white", #wesanderson::wes_palettes$BottleRocket2[4],
vertex.label.family = "Bodoni MT",
vertex.label.color="white",
vertex.label.font = 2,
vertex.label.cex=1.8,
edge.curved=0,
edge.color=wesanderson::wes_palettes$BottleRocket2[4],
edge.width = 3)
legend( "bottomright",
legend = c("Detected", "Undetected", "Not present"),
fill = c(wesanderson::wes_palettes$Royal1[2],
wesanderson::wes_palettes$Royal1[1],
wesanderson::wes_palettes$Moonrise3[3]),
bg = "white",
inset = 0,
cex = 1.9,
title = "Legend",
box.lty=0)
G_3 <- make_empty_graph() +
vertices(poor_nodes)
V(G_3)$test <- rep(1,17)
set.seed(2020)
plot(G_3,
layout=layout.fruchterman.reingold,
main = "Falsely Accused Nodes",
vertex.color = wesanderson::wes_palettes$Royal1[2],
vertex.size=20,
vertex.frame.color= "white", #wesanderson::wes_palettes$BottleRocket2[4],
vertex.label.family = "Bodoni MT",
vertex.label.color="white",
vertex.label.font = 2,
vertex.label.cex=1.8,
edge.curved=0,
edge.color=wesanderson::wes_palettes$BottleRocket2[4],
edge.width = 3)
EG <- c()
#layouts <- grep("^layout_", ls("package:igraph"), value=TRUE)[-1]
#Remove layouts that do not apply to our graph.
#layouts <- layouts[!grepl("bipartite|merge|norm|sugiyama|tree", layouts)]
#par(mfrow=c(3,3), mar=c(1,1,1,1))
#for (layout in layouts) {
#
#  print(layout)
#
#  l <- do.call(layout, list(G_2))
#
#  plot(G_2, edge.arrow.mode=0, layout=l, main=layout) }
